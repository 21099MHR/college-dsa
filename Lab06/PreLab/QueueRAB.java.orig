
public class QueueRAB<T> implements QueueInterface<T>  {

	int numItems;
	int front;
	int back;
	T[] items;
	
	public QueueRAB()
	{
		numItems = 0;
		back = 0;
		front = 0;
		items = (T[]) new Object[3];
	}
	
	
	@Override
	public boolean isEmpty() {
		if(numItems == 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	@Override
	public void enqueue(Object newItem) throws QueueException {
		if(numItems == items.length)
		{	
			resize();
			back = numItems;
		}
		items[back] = (T) newItem;
		back = (back+1)%items.length;
		numItems++;
		
	}

	@Override
	public T dequeue() throws QueueException {
		T result = null;
		if(numItems > 0)
		{
			result = items[front];
			items[front] = null;
			front = (front + 1)%items.length;
			numItems--;
		}		
		return result;
	}

	@Override
	public void dequeueAll() {		
		numItems = 0;
		back = 0;
		front = 0;
		items = (T[]) new Object[3];
	}

	@Override
	public T peek() throws QueueException {
		
		T result = null;
		if(front != -1)
		{
			result = items[front];
		}
		else
		{
			System.out.println("Queue empty!");
		}
		return result;
		
	}
	
	public String toString()
	{
		   StringBuilder builder = new StringBuilder();
		   String toReturn = "";
		
		for(int i = 0; i < items.length; i++)
		{
			if(items[i] != null)
			{
			String name = items[i].toString() + " ";
			builder.append(name);
			}
		}
		
		return toReturn = builder.toString();
		
	}

	private void resize() {
		T[] temp = (T[]) new Object[items.length + ((items.length/2) + 1)];
		System.out.println();
		for(int i = 0; i < numItems; i++)
		{
			temp[i] = items[(front + i) % items.length];
		}
		
		items = temp;
		front = 0;
		
	}
	
}
