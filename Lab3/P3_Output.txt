LAB 3 PROBLEM 3 OUTPUT SAMPLES + WRITE-UP

Select from the following menu:
	1. Insert item to list
	2. Remove item from list
	3. Get item from list
	4. Clear list
	5. Print size and content of list
	6. Delete largest item in the list.
	7. Reverse list
	8. Exit program

Make your selection now: 0
1st String to test: a
2nd String to test: a

a compared to a: 0

Make your selection now: 0
1st String to test: a
2nd String to test: b

a compared to b: -1

Make your selection now: 0
1st String to test: !
2nd String to test: a

! compared to a: -64

Make your selection now: 0
1st String to test: ~
2nd String to test: !

~ compared to !: 93

Make your selection now: 0
1st String to test: A
2nd String to test: a

A compared to a: -32

Make your selection now: 0
1st String to test: a
2nd String to test: A

a compared to A: 32

Make your selection now: 0
1st String to test: aeiou
2nd String to test: aeeiou

aeiou compared to aeeiou: 4

Make your selection now: 0
1st String to test: Aeiou
2nd String to test: Aeeiou

Aeiou compared to Aeeiou: 4

Make your selection now: 0
1st String to test:  
2nd String to test: a

  compared to a: -65

Make your selection now: 0
1st String to test: -
2nd String to test: +

- compared to +: 2

Make your selection now: 0
1st String to test: -
2nd String to test: =

- compared to =: -16

Make your selection now: 0
1st String to test: +
2nd String to test: =

+ compared to =: -18

Make your selection now: 8
Exiting program...Good Bye


---

For sake of ease of testing, I wrote a simple Case 0 in my Driver that took in 2 String values, then compared them. (i.e. StringA.compareTo(StringB)).

Through this process, I was able to ascertain a couple of things, although my testing is not 100% thorough and concrete findings would require more examples to
run through.

For one, the larger the gap between two characters, the 'bigger' the output - ! and a have a massive 64 characters between them, for instance.

Additionally, and while admidtedly obvious, compareTo is case sensitive. If you compare a and A, you get -32 or 32 depending on the order you compare to represent the 32 spaces between them.

Something interesting that I don't know how to explain, exactly, is how it determined that "aeeiou" and "Aeeiou" are bigger than "aeiou" and "Aeiou" respectively. They both gave an output of 4, which tells me that lexographically, they're further down.

Further experiments required to figure that out.

What caught me by surprise is that lexographically, the special characters aren't *after* the alphabet but before them based off the output. 

Stranger still is that the blank space created by hitting the spacebar is one character before the exclamation point.

There's a lot I still don't understand about compareTo, which leads to me to conclude that I need to do more testing regarding compareTo.

However, something to definitely take going forward is that if I want to compare two strings lexographically *while ignoring case* is to use the ignore case version
of compareTo.
