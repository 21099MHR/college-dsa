::::::::::::::
BinarySearchTree.java
::::::::::::::
public class BinarySearchTree<T extends KeyedItem<KT>, KT extends Comparable<? super KT>> extends BinaryTreeBasis<T> {
    // inherits isEmpty(), makeEmpty(), getRootItem(), and
    // the use of the constructors from BinaryTreeBasis

    public BinarySearchTree() {
    } // end default constructor

    public BinarySearchTree(T rootItem) {
        super(rootItem);
    } // end constructor

    public void setRootItem(T newItem) throws UnsupportedOperationException {
        throw new UnsupportedOperationException();
    } // end setRootItem

    public void insert(T newItem) {
        root = insertItem(root, newItem);
    } // end insert

    public T retrieve(KT searchKey) {
        return retrieveItem(root, searchKey);
    } // end retrieve

    public void delete(KT searchKey) throws TreeException {
        root = deleteItem(root, searchKey);
    } // end delete

    public void delete(T item) throws TreeException {
        root = deleteItem(root, item.getKey());
    } // end delete

    protected TreeNode<T> insertItem(TreeNode<T> tNode, T newItem) {
        TreeNode<T> newSubtree;
        if (tNode == null) {
            // position of insertion found; insert after leaf
            // create a new node
            tNode = new TreeNode<T>(newItem, null, null);
            return tNode;
        } // end if
        T nodeItem = tNode.getItem();

        // search for the insertion position

        if (newItem.getKey().compareTo(nodeItem.getKey()) < 0) {
            // search the left subtree
            newSubtree = insertItem(tNode.getLeftChild(), newItem);
            tNode.setLeftChild(newSubtree);
            return tNode;
        } else { // search the right subtree
            newSubtree = insertItem(tNode.getRightChild(), newItem);
            tNode.setRightChild(newSubtree);
            return tNode;
        } // end if
    } // end insertItem

    protected T retrieveItem(TreeNode<T> tNode, KT searchKey) {
        T treeItem;
        if (tNode == null) {
            treeItem = null;
        } else {
            T nodeItem = tNode.getItem();
            if (searchKey.compareTo(nodeItem.getKey()) == 0) {
                // item is in the root of some subtree
                treeItem = tNode.getItem();
            } else if (searchKey.compareTo(nodeItem.getKey()) < 0) {
                // search the left subtree
                treeItem = retrieveItem(tNode.getLeftChild(), searchKey);
            } else { // search the right subtree
                treeItem = retrieveItem(tNode.getRightChild(), searchKey);
            } // end if
        } // end if
        return treeItem;
    } // end retrieveItem

    protected TreeNode<T> deleteItem(TreeNode<T> tNode, KT searchKey) {
        // Calls: deleteNode.
        TreeNode<T> newSubtree;
        if (tNode == null) {
            throw new TreeException("TreeException: Item not found");
        } else {
            T nodeItem = tNode.getItem();
            if (searchKey.compareTo(nodeItem.getKey()) == 0) {
                // item is in the root of some subtree
                tNode = deleteNode(tNode); // delete the item
            }
            // else search for the item
            else if (searchKey.compareTo(nodeItem.getKey()) < 0) {
                // search the left subtree
                newSubtree = deleteItem(tNode.getLeftChild(), searchKey);
                tNode.setLeftChild(newSubtree);
            } else { // search the right subtree
                newSubtree = deleteItem(tNode.getRightChild(), searchKey);
                tNode.setRightChild(newSubtree);
            } // end if
        } // end if
        return tNode;
    } // end deleteItem

    protected TreeNode<T> deleteNode(TreeNode<T> tNode) {
        // Algorithm note: There are four cases to consider:
        // 1. The tNode is a leaf.
        // 2. The tNode has no left child.
        // 3. The tNode has no right child.
        // 4. The tNode has two children.
        // Calls: findLeftmost and deleteLeftmost
        T replacementItem;

        // test for a leaf
        if ((tNode.getLeftChild() == null) && (tNode.getRightChild() == null)) {
            return null;
        } // end if leaf

        // test for no left child
        else if (tNode.getLeftChild() == null) {
            return tNode.getRightChild();
        } // end if no left child

        // test for no right child
        else if (tNode.getRightChild() == null) {
            return tNode.getLeftChild();
        } // end if no right child

        // there are two children:
        // retrieve and delete the inorder successor
        else {
            replacementItem = findLeftmost(tNode.getRightChild());
            tNode.setItem(replacementItem);
            tNode.setRightChild(deleteLeftmost(tNode.getRightChild()));
            return tNode;
        } // end if
    } // end deleteNode

    protected T findLeftmost(TreeNode<T> tNode) {
        if (tNode.getLeftChild() == null) {
            return tNode.getItem();
        } else {
            return findLeftmost(tNode.getLeftChild());
        } // end if
    } // end findLeftmost

    protected TreeNode<T> deleteLeftmost(TreeNode<T> tNode) {
        if (tNode.getLeftChild() == null) {
            return tNode.getRightChild();
        } else {
            tNode.setLeftChild(deleteLeftmost(tNode.getLeftChild()));
            return tNode;
        } // end if
    } // end deleteLeftmost

} // end BinarySearchTree::::::::::::::
BinaryTreeBasis.java
::::::::::::::
public abstract class BinaryTreeBasis<T> {
    protected TreeNode<T> root;

    public BinaryTreeBasis() {
        root = null;
    } // end default constructor

    public BinaryTreeBasis(T rootItem) {
        root = new TreeNode<T>(rootItem, null, null);
    } // end constructor

    public boolean isEmpty() {
        // Returns true if the tree is empty, else returns false.
        return root == null;
    } // end isEmpty

    public void makeEmpty() {
        // Removes all nodes from the tree.
        root = null;
    } // end makeEmpty

    public T getRootItem() throws TreeException {
        // Returns the item in the tree's root.
        if (root == null) {
            throw new TreeException("TreeException: Empty tree");
        } else {
            return root.getItem();
        } // end if
    } // end getRootItem

    public abstract void setRootItem(T newItem);
    // Throws UnsupportedOperationException if operation
    // is not supported.

    public int getHeight() {
        // TODO Auto-generated method stub
        return 0;
    }

    public String toStringPreorder() {
        // TODO Auto-generated method stub
        return null;
    }

    public String toStringPostorder() {
        // TODO Auto-generated method stub
        return null;
    }



} // end BinaryTreeBasis::::::::::::::
BSTPInterface.java
::::::::::::::
public interface BSTPInterface <T extends KeyedItem<KT>,KT extends Comparable<? super KT>>  {

    public int getHeight();
// returns the height of the tree (recursive implementation)

    public int getSize();
// returns the number of nodes in the tree(recursive implementation)

    public String toStringInorder();
// returns String representation of Tree with items in Inorder
//(recursive implementation)

    public String toStringPreorder();
// returns String representation of Tree with items in Preorder
//(recursive implementation)

    public String toStringPostorder();
// returns String representation of Tree with items in Postorder
// (recursive implementation)

    public MyBinarySearchTreePlus<T,KT> getCopyOfTree();
// returns a new tree containing a copy of the original tree
// with the same structure. Note: the new tree should not have
// any shared nodes with the original.(recursive implementation)

}// end BSTPInterface::::::::::::::
Driver.java
::::::::::::::
/*
 * Purpose: Data Structure and Algorithms Lab 11 Problem 3
 * Status: Incomplete
 * Last update: 09/10/19
 * Submitted:  09/11/19
 * Comment: Not enough time to figure out why the method calls aren't working.
 * @author: Matthew Ryan
 * @version: 2019.09.06
 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Driver {
    static BufferedReader stdin = new BufferedReader (new InputStreamReader(System.in));


    public static <T> void main(String[] args) throws NumberFormatException, IOException {

        System.out.println
        ("\t0. Exit program"
         + "\n\t1. Insert key in BST"
         + "\n\t2. Delete key from BST"
         + "\n\t3. Search for key in BST"
         + "\n\t4. Display size of BST"
         + "\n\t5. Display height of BST"
         + "\n\t6. Display content of BST in preorder"
         + "\n\t7. Display content of BST in postorder"
         + "\n\t8. Display content of BST in inorder"
         + "\n\t9. Build copy of the tree, and test it");

        boolean switchOn = true;
        int selection = -1;

        MyBinarySearchTreePlus<?, ?> tree = new MyBinarySearchTreePlus();

        while(switchOn == true)
        {
            System.out.print("\nMake your selection now: ");
            selection = Integer.parseInt(stdin.readLine());

            switch(selection) {
            case 0:
                System.out.println("Exiting program... Good bye");
                switchOn = false;
                break;
            case 1:
                T toAdd = (T) new Item(stdin.readLine(), selection, switchOn);
                tree.insert(toAdd);
                break;

            case 2:
                String searchKey = stdin.readLine();
                tree.delete(searchKey);
                break;

            case 3:
                String searchKey = stdin.readLine();
                tree.retrieve(searchKey);
                break;

            case 4:
                System.out.println("Size of tree: " + tree.getSize());
                break;

            case 5:
                System.out.println("Height of tree: " + tree.getHeight());
                break;

            case 6:

                System.out.println("BST in preorder: " + tree.toStringPreorder());
                break;

            case 7:
                System.out.println("BST in postorder: " + tree.toStringPostorder());
                break;

            case 8:
                System.out.println("BST in inorder : " + tree.toStringInorder());

            case 9:
                tree.getCopyOfTree();
            }
        }

    }

}
::::::::::::::
Item.java
::::::::::::::

public class Item<KT extends Comparable<? super KT>> extends KeyedItem<KT> {
    private int assocint;
    private boolean assocboolean;

    public Item(String key, int assocint, boolean assocboolean) {
        super((KT) key);
        this.assocint = assocint;
        this.assocboolean = assocboolean;
    }

    public int getAssocint() {
        return assocint;
    }

    public void setAssocint(int setter)
    {
        assocint = setter;
    }

    public boolean getAssocboolean()
    {
        return assocboolean;
    }

    public void setAssocboolean(boolean setter)
    {
        assocboolean = setter;
    }
}
::::::::::::::
KeyedItem.java
::::::::::::::
public abstract class KeyedItem<KT extends Comparable<? super KT>> {
    private KT searchKey;

    public KeyedItem(KT key) {
        searchKey = key;
    } // end constructor

    public KT getKey() {
        return searchKey;
    } // end getKey
} // end KeyedItem::::::::::::::
MyBinarySearchTree.java
::::::::::::::
public class MyBinarySearchTree<T extends KeyedItem<KT>, KT extends Comparable<? super KT>> extends BinaryTreeBasis<T> {
    // inherits isEmpty(), makeEmpty(), getRootItem(), and
    // the use of the constructors from BinaryTreeBasis

    public MyBinarySearchTree() {
    } // end default constructor

    public MyBinarySearchTree(T rootItem) {
        super(rootItem);
    } // end constructor

    public void setRootItem(T newItem) throws UnsupportedOperationException {
        throw new UnsupportedOperationException();
    } // end setRootItem

    public void insert(T toAdd) {
        root = insertItem(root, toAdd);
    } // end insert

    protected TreeNode<T> insertItem(TreeNode<T> tNode, T newItem) {
        TreeNode<T> newSubtree;
        if (tNode == null) {
// position of insertion found; insert after leaf
// create a new node
            tNode = new TreeNode<T>(newItem, null, null);
            return tNode;
        } // end if
        T nodeItem = tNode.getItem();

// search for the insertion position

        if (newItem.getKey().compareTo(nodeItem.getKey()) < 0) {
// search the left subtree
            newSubtree = insertItem(tNode.getLeftChild(), newItem);
            tNode.setLeftChild(newSubtree);
            return tNode;
        } else { // search the right subtree
            newSubtree = insertItem(tNode.getRightChild(), newItem);
            tNode.setRightChild(newSubtree);
            return tNode;
        } // end if
    } // end insertItem

    public void delete(KT searchKey) throws TreeException {
        root = deleteItem(root, searchKey);
    } // end delete

    public void delete(T item) throws TreeException {
        root = deleteItem(root, item.getKey());
    } // end delete

    protected TreeNode<T> deleteItem(TreeNode<T> tNode, KT searchKey) {
        // Calls: deleteNode.
        TreeNode<T> newSubtree;
        if (tNode == null) {
            throw new TreeException("TreeException: Item not found");
        } else {
            T nodeItem = tNode.getItem();
            if (searchKey.compareTo(nodeItem.getKey()) == 0) {
                // item is in the root of some subtree
                tNode = deleteNode(tNode); // delete the item
            }
            // else search for the item
            else if (searchKey.compareTo(nodeItem.getKey()) < 0) {
                // search the left subtree
                newSubtree = deleteItem(tNode.getLeftChild(), searchKey);
                tNode.setLeftChild(newSubtree);
            } else { // search the right subtree
                newSubtree = deleteItem(tNode.getRightChild(), searchKey);
                tNode.setRightChild(newSubtree);
            } // end if
        } // end if
        return tNode;
    } // end deleteItem

    protected TreeNode<T> deleteNode(TreeNode<T> tNode) {
        // Algorithm note: There are four cases to consider:
        // 1. The tNode is a leaf.
        // 2. The tNode has no left child.
        // 3. The tNode has no right child.
        // 4. The tNode has two children.
        // Calls: findLeftmost and deleteLeftmost
        T replacementItem;

        // test for a leaf
        if ((tNode.getLeftChild() == null) && (tNode.getRightChild() == null)) {
            return null;
        } // end if leaf

        // test for no left child
        else if (tNode.getLeftChild() == null) {
            return tNode.getRightChild();
        } // end if no left child

        // test for no right child
        else if (tNode.getRightChild() == null) {
            return tNode.getLeftChild();
        } // end if no right child

        // there are two children:
        // retrieve and delete the inorder successor
        else {
            replacementItem = findLeftmost(tNode.getRightChild());
            tNode.setItem(replacementItem);
            tNode.setRightChild(deleteLeftmost(tNode.getRightChild()));
            return tNode;
        } // end if
    } // end deleteNode

    public T retrieve(KT searchKey) {
        String toSearch = searchKey.toString();
        T toReturn = null;

        TreeNode<T> current = root;
        boolean found = false;

        while (found == false && ((current.getLeftChild() != null) || current.getRightChild() != null)) {
            String currentString = current.toString();
            if (toSearch.compareTo(currentString) == 0) {
                found = true;
                toReturn = current.getItem();
            } else if (toSearch.compareTo(currentString) < 0) {
                current = root.getLeftChild();
            } else if (toSearch.compareTo(currentString) > 0) {
                current = root.getRightChild();
            }
        }

        return toReturn;
    }

    protected T findLeftmost(TreeNode<T> tNode) {

        TreeNode<T> current = root;
        T leftMost = null;
        boolean found = false;

        while (found == false) {
            if (current.getLeftChild() == null) {
                leftMost = current.getItem();
                found = true;
            } else {
                current = current.getLeftChild();
            }
        }

        return leftMost;

    } // end findLeftmost

    protected TreeNode<T> deleteLeftmost(TreeNode<T> tNode) {
        TreeNode<T> current = root;
        boolean found = false;

        while (found == false) {
            if (current.getLeftChild() == null) {
                found = true;
            } else {
                current = current.getLeftChild();
            }
        }

        return current;
    } // end deleteLeftmost

    public int getHeight() {
        // TODO Auto-generated method stub
        return 0;
    }

    public int getSize() {
        // TODO Auto-generated method stub
        return 0;
    }

    public String toStringInorder() {
        // TODO Auto-generated method stub
        return null;
    }

    public String toStringPreorder() {
        // TODO Auto-generated method stub
        return null;
    }

    public String toStringPostorder() {
        // TODO Auto-generated method stub
        return null;
    }

    public MyBinarySearchTreePlus<T, KT> getCopyOfTree() {
        // TODO Auto-generated method stub
        return null;
    }

} // end MyBinarySearchTree::::::::::::::
MyBinarySearchTreePlus.java
::::::::::::::
import java.lang.StringBuilder;

public class MyBinarySearchTreePlus<T extends KeyedItem<KT>, KT extends Comparable<? super KT>>
    extends MyBinarySearchTree<T, KT> implements BSTPInterface {

    @Override
    public int getHeight() {
        int result = 0;
        if (root == null) {
            return 0;
        } else {

            result = heightCalc(root, 1);
        }
        return result;
    }

    private int heightCalc(TreeNode<T> node, int count) {

        int leftResult = 0;
        int rightResult = 0;
        int result = 0;

        if (node.getLeftChild() != null) {
            count++;
            leftResult = heightCalc(node.getLeftChild(), count);
        }

        if (node.getRightChild() != null) {
            count++;
            rightResult = heightCalc(node.getRightChild(), count);
        }

        if(leftResult > rightResult)
        {
            result = leftResult;
        }
        else
        {
            result = rightResult;
        }

        return result;
    }

    private int sizeCalc(TreeNode<T> child) {
        int result = 1;

        if (root == null) {
            result = 0;
        } else if ((child.getLeftChild() == null) && (child.getRightChild() == null)) {
            return result;
        } else {
            if (child.getLeftChild() != null) {
                result += sizeCalc(child.getLeftChild());
            }
            if (child.getRightChild() != null) {
                result += sizeCalc(child.getRightChild());
            }
        }

        return result;
    }

    @Override
    public int getSize() {
        int result = sizeCalc(root);
        return result;
    }

    @Override
    public String toStringInorder() {

        StringBuilder build = new StringBuilder();

        String result = inorderBuild(root, build).toString();

        return result;
    }

    private StringBuilder inorderBuild(TreeNode<T> node, StringBuilder build) {

        if (node == null) {
            return null;
        } else {
            if (node.getLeftChild() != null) {
                preorderBuild(node.getLeftChild(), build);
            }

            build.append(node.getItem().toString());

            if (node.getRightChild() != null) {
                preorderBuild(node.getRightChild(), build);
            }
        }

        return build;
    }

    @Override
    public String toStringPreorder() {
        StringBuilder build = new StringBuilder();

        String result = preorderBuild(root, build).toString();

        return result;
    }

    private StringBuilder preorderBuild(TreeNode<T> node, StringBuilder build) {

        if (node == null) {
            return null;
        } else {
            build.append(node.getItem().toString());

            if (node.getLeftChild() != null) {
                preorderBuild(node.getLeftChild(), build);
            }
            if (node.getRightChild() != null) {
                preorderBuild(node.getRightChild(), build);
            }
        }

        return build;
    }

    @Override
    public String toStringPostorder() {

        StringBuilder build = new StringBuilder();

        String result = postOrderBuild(root, build).toString();

        return result;
    }

    private StringBuilder postOrderBuild(TreeNode<T> node, StringBuilder build) {
        if (node == null) {
            return null;
        } else {

            if (node.getLeftChild() != null) {
                preorderBuild(node.getLeftChild(), build);
            }
            if (node.getRightChild() != null) {
                preorderBuild(node.getRightChild(), build);
            }

            build.append(node.getItem().toString());
        }

        return build;
    }

    @Override
    public MyBinarySearchTreePlus<T, KT> getCopyOfTree() {

        MyBinarySearchTreePlus<T, KT> cloneTree = new MyBinarySearchTreePlus<T, KT>();

        cloneTree = cloneTree(root, cloneTree);

        return null;
    }

    private MyBinarySearchTreePlus<T, KT> cloneTree(TreeNode<T> node, MyBinarySearchTreePlus<T, KT> cloneTree) {
        if (node == null) {
            return null;
        } else {

            T cloneItem = node.getItem();

            if (node.equals(root)) {
                cloneTree.setRootItem(cloneItem);
            } else {
                cloneTree.insert(cloneItem);
            }

            if (node.getLeftChild() != null) {
                cloneTree(node.getLeftChild(), cloneTree);
            }

            if (node.getRightChild() != null) {
                cloneTree(node.getRightChild(), cloneTree);
            }
        }

        return null;
    }

}
::::::::::::::
TreeException.java
::::::::::::::
public class TreeException extends RuntimeException {
    public TreeException(String s) {
        super(s);
    }  // end constructor
} // end TreeException::::::::::::::
TreeNode.java
::::::::::::::
class TreeNode<T> {
    private T item;
    private TreeNode<T> leftChild;
    private TreeNode<T> rightChild;

    public TreeNode(T newItem) {
        // Initializes tree node with item and no children.
        item = newItem;
        leftChild = null;
        rightChild = null;
    } // end constructor

    public TreeNode(T newItem, TreeNode<T> left, TreeNode<T> right) {
        // Initializes tree node with item and
        // the left and right children references.
        item = newItem;
        leftChild = left;
        rightChild = right;
    } // end constructor

    public T getItem() {
        return item;
    }

    public void setItem(T item) {
        this.item = item;
    }

    public TreeNode<T> getLeftChild() {
        return leftChild;
    }

    public void setLeftChild(TreeNode<T> leftChild) {
        this.leftChild = leftChild;
    }

    public TreeNode<T> getRightChild() {
        return rightChild;
    }

    public void setRightChild(TreeNode<T> rightChild) {
        this.rightChild = rightChild;
    }

} // end TreeNode
::::::::::::::
Lab11_Conclusions.txt
::::::::::::::
This was a bit of a doozy. Not being able to test my work afterwards is not
doing a lot for my confidence.

Conceptually, I understand *why* we're using KeyedItem, but it feels like
KeyedItem only makes the program more complicated than it needs to be for our
purposes.

That being said, this lab helped remind me how to write a Recursive function,
so that's appreciated.
::::::::::::::
status.txt
::::::::::::::
Program does not currently compile; due to this, and a lack of time to
troubleshoot, I cannot do any testing.

Apologies.
