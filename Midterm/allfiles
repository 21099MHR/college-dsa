::::::::::::::
Customer.java
::::::::::::::

public class Customer {
	
	protected String name;
	protected int amazonBuy;
	protected int teslaBuy;
	protected int microsoftBuy;
	
	public Customer(String name, int amazonBuy, int teslaBuy, int microsoftBuy)
	{
		this.name = name;
		this.amazonBuy = amazonBuy;
		this.teslaBuy = teslaBuy;
		this.microsoftBuy = microsoftBuy;
	}
	
	public String toString()
	{
		return name + " requesting " + amazonBuy + " Amazon, " + teslaBuy + " Tesla, and " + microsoftBuy + " Microsoft stock";
		
	}
}
::::::::::::::
Driver.java
::::::::::::::
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class Driver {

	static BufferedReader stdin = new BufferedReader (new InputStreamReader(System.in));
	
	public static <T> void main(String[] args) throws NumberFormatException, IOException, QueueException {
		
		QueueSLS<T> requests = new QueueSLS<T>();
		StackSLS<T> pending = new StackSLS<T>();
		
		int customerTotal = 0;
		
		int amazonTotal = 0;
		int teslaTotal = 0;
		int microsoftTotal = 0;
		
		
		
		System.out.print("Welcome to the Common A.T.M. Stock Exchange Center!\nEnter amount of Amazon stock available: ");
		int amazonStock = Integer.parseInt(stdin.readLine().trim());
		System.out.println(amazonStock);
		
		System.out.print("Enter amount of Tesla stock available: ");
		int teslaStock = Integer.parseInt(stdin.readLine().trim());
		System.out.println(teslaStock);
		
		System.out.print("Enter amount of Microsoft stock available: ");
		int microsoftStock = Integer.parseInt(stdin.readLine().trim());
		System.out.println(microsoftStock);
		
		System.out.println("\nSelect from the following menu:\n"
				+ " 0. Display Stock and Exit\n"
				+ " 1. Customer enters with request to buy stock\n"
				+ " 2. Customer enters with request to sell stock\n"
				+ " 4. Display customers waiting to be served and their requests\n"
				+ " 5. Display pending requests waiting to be processed\n"
				+ " 6. Process pending requests\n"
				+ " 7. Display number of customers that have been served\n"
				+ " 8. Display total amount of stock that has been traded\n");
		
		boolean switchOn = true;
		
		while(switchOn == true)
		{
		System.out.print("\nMake your selection now: ");	
		int selection = Integer.parseInt(stdin.readLine().trim());
		System.out.println(selection);
		
		switch(selection)
		{
		
		case 0:
			System.out.println("Stock left at closing: " + amazonStock + " Amazon, " + teslaStock + " Tesla, and "
					+ microsoftStock + " Microsoft\nBye!");
			switchOn = false;
			break;
			
		case 1:
			
			System.out.print("Welcome! Name, please: ");
			String name = stdin.readLine().trim();
			System.out.println(name);
			
			System.out.print("\nHow much Amazon stock do you want: ");
			int amazonBuy = Integer.parseInt(stdin.readLine().trim());
			System.out.println(amazonBuy);
			
			System.out.print("\nHow much Tesla stock do you want: ");
			int teslaBuy = Integer.parseInt(stdin.readLine().trim());
			System.out.println(teslaBuy);
			
			System.out.print("\nHow much Microsoft stock do you want: ");
			int microsoftBuy = Integer.parseInt(stdin.readLine().trim());
			System.out.println(microsoftBuy);
			
			Customer toBuy = new Customer(name, amazonBuy, teslaBuy, microsoftBuy);
			
			requests.enqueue(toBuy);
			
			System.out.println(name + " requesting " + amazonBuy + " Amazon, " + teslaBuy +  " Tesla, and " 
			+ microsoftBuy + " Microsoft stock is now waiting.");
			
			break;
			
		case 2:
			System.out.print("Welcome, your name, please: ");
			
			String nameSell = stdin.readLine().trim();
			
			System.out.print("\nHow much Amazon stock are you selling: ");
			int amazonSell = Integer.parseInt(stdin.readLine().trim());
			amazonStock += amazonSell;
			
			System.out.print("\nHow much Tesla stock are you selling: ");
			int teslaSell = Integer.parseInt(stdin.readLine().trim());
			teslaStock += teslaSell;
			
			System.out.println("\nHow much Microsoft stock are you selling: ");
			int microsoftSell = Integer.parseInt(stdin.readLine().trim());
			microsoftStock += microsoftSell;
			
			System.out.println("Thanks, " + nameSell + ", here is your receipt for the " + amazonSell + " Amazon, " + teslaSell 
					+ " Tesla, and " + microsoftSell + " Microsoft stock!");
			
			break;
			
		case 3:
			if(requests.isEmpty())
			{
				System.out.println("No customer is waiting to be served!");
			}
			else
			{
			Customer toServe = (Customer) requests.dequeue();
			String serveeName = toServe.name;
			
			int amazonToServe = toServe.amazonBuy;
			int teslaToServe = toServe.teslaBuy;
			int microsoftToServe = toServe.microsoftBuy;
			
			if((amazonStock < amazonToServe) || (teslaStock < teslaToServe) || (microsoftStock < microsoftToServe))
			{
				System.out.println(serveeName + "'s requests for " + amazonToServe + " Amazon, " + teslaToServe
						+ " Tesla, and " + microsoftToServe + " Microsoft stock is now pending. Goodbye, " + serveeName + 
						". We will let you\nknow when your request is processed!");
				pending.push(toServe);
			}
			else
			{
				System.out.println(serveeName + " is leaving with " + amazonToServe + " Amazon, " + teslaToServe + " Tesla, "
						+ "and " + microsoftToServe + " Microsoft stock.");
				
				customerTotal++;
				
				amazonTotal += amazonToServe;
				teslaTotal += teslaToServe;
				microsoftTotal += microsoftToServe;
			}
			}	
			break;
			
		case 4:			
			if(requests.isEmpty())
			{
				System.out.println("No customer is waiting to be served!");
			}
			else
			{
				System.out.println("The following customers are waiting to be served: ");
			Node<T> node = requests.front;
			
			while(node.getNext() != null)
			{
				Customer toPrint = (Customer) node.getItem();
				System.out.println(toPrint.toString());
				node = node.getNext();
			}
			}	
			break;
			
		case 5:			
			if(pending.isEmpty())
			{
				System.out.println("No customer is waiting to be served!");
			}
			else
			{
				System.out.println("The following requests are pending: ");

			Node<T> pendingNode = requests.front;
			
			while(pendingNode.getNext() != null)
			{
				Customer toPrint = (Customer) pendingNode.getItem();
				System.out.println((toPrint.toString()));
				pendingNode = pendingNode.getNext();
			}
			}
			break;
			
		case 6:
			
			if(pending.isEmpty())
			{
				System.out.println("No customer is waiting to be served!");
			}
			else
			{
			Customer pendingServe = (Customer) pending.peek();
			int amazonPending = pendingServe.amazonBuy;
			int teslaPending = pendingServe.teslaBuy;
			int microsoftPending = pendingServe.microsoftBuy;	
		
			
			if(pending.isEmpty())
			{
				System.out.println("No requests to process!");
			}
			else if((amazonStock >= amazonPending) && (teslaStock >= teslaPending) && (microsoftStock >= microsoftPending))
			{
			while((amazonStock >= amazonPending) && (teslaStock >= teslaPending) && (microsoftStock >= microsoftPending) && (pending.peek() != null))
			{
				String pendingName = pendingServe.name;
				
				System.out.println(pendingName + "'s request for " + amazonPending + " Amazon, " + teslaPending + " Tesla, and " + 
				microsoftPending + " Microsoft stock has been fulfilled and the customer has been notified.");
				
				pending.pop();
				customerTotal++;
			
				pendingServe = (Customer) pending.peek();
				pendingName = pendingServe.name;
				amazonPending = pendingServe.amazonBuy;
				teslaPending = pendingServe.teslaBuy;
				microsoftPending = pendingServe.microsoftBuy;	
			}
			}
			else
			{
				System.out.println("No request could be processed!");
			}
			}
			break;
			
		case 7:
			if(customerTotal == 0)
			{
				System.out.println("No customers have been served yet.");
			}
			else
			{
				System.out.print(customerTotal);
				if(customerTotal == 1)
				{
					System.out.println(" customer has been served.");
				}
				else
				{
					System.out.println(" customers have been served.");
				}
			}
			break;
			
		case 8:
			System.out.println("Total stock traded: " + amazonTotal + " Amazon, " + teslaTotal + " Tesla, and " 
		+ microsoftTotal + " Microsoft");
			break;
			
		default:
			
			break;
				
			
		}	
		}
	}
}
	


::::::::::::::
Node.java
::::::::::::::
/*

 * Purpose: Data Structure and Algorithms Lab 3 Problem 1

 * Status: Complete and thoroughly tested

 * Last update: 02/11/20

 * Submitted:  02/11/20

 * Comment: test suite and sample run attached

 * @author: Matthew Ryan

 * @version: 2020.02.11

 */

//please note that this code is different from the textbook code, because the data is encapsulated!
 
public class Node<T> 
{
  private T item;
  private Node next;

  public Node(T newItem) 
  {
    item = newItem;
    next = null;
  } // end constructor

  public Node(T newItem, Node nextNode) 
  {
    item = newItem;
    next = nextNode;
  } // end constructor

  public void setItem(T newItem) 
  {
    item = newItem;
  } // end setItem

  public Object getItem() 
  {
    return item;
  } // end getItem

  public void setNext(Node nextNode) 
  {
    next = nextNode;
  } // end setNext

  public Node getNext() 
  {
    return next;
  } // end getNext
  
} // end class Node::::::::::::::
QueueException.java
::::::::::::::
public class QueueException extends Throwable {

  public QueueException(String s) {
    super(s);
  }  // end constructor
}  // end QueueException::::::::::::::
QueueInterface.java
::::::::::::::
public interface QueueInterface<T> {

  public boolean isEmpty();
  // Determines whether a queue is empty.
  // Precondition: None.
  // Postcondition: Returns true if the queue is empty;
  // otherwise returns false.
   
  public void enqueue(T newItem) throws QueueException;
  // Adds an item at the back of a queue.
  // Precondition: newItem is the item to be inserted. 
  // Postcondition: If the operation was successful, newItem
  // is at the back of the queue. Some implementations
  // may throw QueueException if newItem cannot be added
  // to the queue.

  public T dequeue() throws QueueException;
  // Retrieves and removes the front of a queue.
  // Precondition: None.
  // Postcondition: If the queue is not empty, the item that
  // was added to the queue earliest is removed. If the queue is 
  // empty, the operation is impossible and QueueException is thrown.

  public void dequeueAll();
  // Removes all items of a queue.
  // Precondition: None.
  // Postcondition: The queue is empty.

  public T peek() throws QueueException;
  // Retrieves the item at the front of a queue.
  // Precondition: None.
  // Postcondition: If the queue is not empty, the item
  // that was added to the queue earliest is returned. 
  // If the queue is empty, the operation is impossible
  // and QueueException is thrown.
  
  public String toString();
}  // end QueueInterface

::::::::::::::
QueueSLS.java
::::::::::::::

public class QueueSLS<T> implements QueueInterface {

	Node<T> front;
	Node<T> back;
	
	public QueueSLS()
	{
		front = null;
		back = null;
	}
	
	@Override
	public boolean isEmpty() {
		
		if(front == null)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	@Override
	public void enqueue(Object newItem) throws QueueException {
		if(back == null)
		{
			front = back = new Node(newItem);	
		}
		else
		{
			Node temp = new Node(newItem);
			back.setNext(temp);
			back = temp;
		}
	}

	@Override
	public Object dequeue() throws QueueException {
		
		Object result = front.getItem();
		
		if((front.getNext() != null)) 
		{
			result = front.getItem();
			front = front.getNext();
			if(front == null)
			{
				back = null;
			}
		}
		
		return result;
	}

	@Override
	public void dequeueAll() {
		front = null;
		back = null;
	}

	@Override
	public Object peek() throws QueueException {
		return front.getItem();
	}
	
	  public String toString()
	  {
		   Node<T> next = front;
		   StringBuilder builder = new StringBuilder();
		   String toReturn = "";
		   
		   while(next != null)
		   {
			   String name = next.getItem().toString() + " ";
			   builder.append(name);
			   next = next.getNext();
		   }
		   toReturn = builder.toString();
		   
		return toReturn;  
	  
	  }	

}
::::::::::::::
StackException.java
::::::::::::::
public class StackException 
             extends java.lang.RuntimeException {
  public StackException(String s) {
    super(s);
  }  // end constructor
}  // end StackException::::::::::::::
StackInterface.java
::::::::::::::
public interface StackInterface<T> {
  public boolean isEmpty();
  // Determines whether the stack is empty.
  // Precondition: None.
  // Postcondition: Returns true if the stack is empty;
  // otherwise returns false.

  public void popAll();
  // Removes all the items from the stack.
  // Precondition: None.
  // PostCondition: Stack is empty.

  public void push(T newItem) throws StackException;
  // Adds an item to the top of a stack.
  // Precondition: newItem is the item to be added.
  // Postcondition: If insertion is successful, newItem
  // is on the top of the stack.
  // Exception: Some implementations may throw 
  // StackException when newItem cannot be placed on
  // the stack.

  public T pop() throws StackException;
  // Removes the top of a stack.
  // Precondition: None.
  // Postcondition: If the stack is not empty, the item 
  // that was added most recently is removed from the
  // stack.
  // Exception: Throws StackException if the stack is 
  // empty.
  
  public T peek() throws StackException;
  // Retrieves the top of a stack.
  // Precondition: None.
  // Postcondition: If the stack is not empty, the item
  // that was added most recently is returned. The 
  // stack is unchanged. 
  // Exception: Throws StackException if the stack is 
  // empty.
  public String toString();
}  // end StackInterface::::::::::::::
StackSLS.java
::::::::::::::

public class StackSLS<T> implements StackInterface {

	private Node top;

	public <T> StackSLS()
	{
		top = null;
	}

	@Override
	public boolean isEmpty() {
		if(top == null)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	@Override
	public void popAll() {
		top = null;
	}

	@Override
	public void push(Object newItem) throws StackException {
		top = new Node(newItem, top);
	}

	@Override
	public T pop() throws StackException {
		T result = null;
		if(top != null)
		{
			result = (T) top.getItem();
			top = top.getNext();
		}
		return result;
	}

	@Override
	public T peek() throws StackException {
		T result = null;
		if(top != null)
		{
			result = (T) top.getItem();
		}
		return result;
	}
	
	  public String toString()
	  {
		   Node<T> next = top;
		   StringBuilder builder = new StringBuilder();
		   String toReturn = "";
		   
		   while(next != null)
		   {
			   String name = next.getItem().toString() + " ";
			   builder.append(name);
			   next = next.getNext();
		   }
		   toReturn = builder.toString();
		   
		return toReturn;  
	  
	  }	
}
::::::::::::::
output.txt
::::::::::::::
Welcome to the Common A.T.M. Stock Exchange Center!
Enter amount of Amazon stock available: 3
Enter amount of Tesla stock available: 1
Enter amount of Microsoft stock available: 2

Select from the following menu:
 0. Display Stock and Exit
 1. Customer enters with request to buy stock
 2. Customer enters with request to sell stock
 4. Display customers waiting to be served and their requests
 5. Display pending requests waiting to be processed
 6. Process pending requests
 7. Display number of customers that have been served
 8. Display total amount of stock that has been traded


Make your selection now: 3
No customer is waiting to be served!

Make your selection now: 4
No customer is waiting to be served!

Make your selection now: 5
No customer is waiting to be served!

Make your selection now: 7
No customers have been served yet.

Make your selection now: 8
Total stock traded: 0 Amazon, 0 Tesla, and 0 Microsoft

Make your selection now: 1
Welcome! Name, please: Eevee

How much Amazon stock do you want: 2

How much Tesla stock do you want: 0

How much Microsoft stock do you want: 0
Eevee requesting 2 Amazon, 0 Tesla, and 0 Microsoft stock is now waiting.

Make your selection now: 1
Welcome! Name, please: Mudkip

How much Amazon stock do you want: 2

How much Tesla stock do you want: 1

How much Microsoft stock do you want: 1
Mudkip requesting 2 Amazon, 1 Tesla, and 1 Microsoft stock is now waiting.

Make your selection now: 4
The following customers are waiting to be served: 
Eevee requesting 2 Amazon, 0 Tesla, and 0 Microsoft stock

Make your selection now: 5
No customer is waiting to be served!

Make your selection now: 7
No customers have been served yet.

Make your selection now: 8
Total stock traded: 0 Amazon, 0 Tesla, and 0 Microsoft

Make your selection now: 3
Eevee is leaving with 2 Amazon, 0 Tesla, and 0 Microsoft stock.

Make your selection now: 4
The following customers are waiting to be served: 

Make your selection now: 5
No customer is waiting to be served!

Make your selection now: 7
1 customer has been served.

Make your selection now: 8
Total stock traded: 2 Amazon, 0 Tesla, and 0 Microsoft

Make your selection now: 3
Mudkip is leaving with 2 Amazon, 1 Tesla, and 1 Microsoft stock.

Make your selection now: 4
The following customers are waiting to be served: 

Make your selection now: 5
No customer is waiting to be served!

Make your selection now: 7
2 customers have been served.

Make your selection now: 8
Total stock traded: 4 Amazon, 1 Tesla, and 1 Microsoft

Make your selection now: 6
No customer is waiting to be served!

Make your selection now: 2
Welcome, your name, please: 
How much Amazon stock are you selling: 
How much Tesla stock are you selling: 
How much Microsoft stock are you selling: 
Thanks, Snivy, here is your receipt for the 3 Amazon, 0 Tesla, and 0 Microsoft stock!

Make your selection now: 1
Welcome! Name, please: Tepig

How much Amazon stock do you want: 4

How much Tesla stock do you want: 2

How much Microsoft stock do you want: 1
Tepig requesting 4 Amazon, 2 Tesla, and 1 Microsoft stock is now waiting.

Make your selection now: 4
The following customers are waiting to be served: 
Mudkip requesting 2 Amazon, 1 Tesla, and 1 Microsoft stock

Make your selection now: 5
No customer is waiting to be served!

Make your selection now: 7
2 customers have been served.

Make your selection now: 8
Total stock traded: 4 Amazon, 1 Tesla, and 1 Microsoft

Make your selection now: 1
Welcome! Name, please: Abra

How much Amazon stock do you want: 5

How much Tesla stock do you want: 3

How much Microsoft stock do you want: 2
Abra requesting 5 Amazon, 3 Tesla, and 2 Microsoft stock is now waiting.

Make your selection now: 1
Welcome! Name, please: Mew

How much Amazon stock do you want: 2

How much Tesla stock do you want: 1

How much Microsoft stock do you want: 1
Mew requesting 2 Amazon, 1 Tesla, and 1 Microsoft stock is now waiting.

Make your selection now: 1
Welcome! Name, please: Pikachu

How much Amazon stock do you want: 2

How much Tesla stock do you want: 2

How much Microsoft stock do you want: 1
Pikachu requesting 2 Amazon, 2 Tesla, and 1 Microsoft stock is now waiting.

Make your selection now: 1
Welcome! Name, please: Pidove

How much Amazon stock do you want: 3

How much Tesla stock do you want: 6

How much Microsoft stock do you want: 2
Pidove requesting 3 Amazon, 6 Tesla, and 2 Microsoft stock is now waiting.

Make your selection now: 4
The following customers are waiting to be served: 
Mudkip requesting 2 Amazon, 1 Tesla, and 1 Microsoft stock
Tepig requesting 4 Amazon, 2 Tesla, and 1 Microsoft stock
Abra requesting 5 Amazon, 3 Tesla, and 2 Microsoft stock
Mew requesting 2 Amazon, 1 Tesla, and 1 Microsoft stock
Pikachu requesting 2 Amazon, 2 Tesla, and 1 Microsoft stock

Make your selection now: 5
No customer is waiting to be served!

Make your selection now: 7
2 customers have been served.

Make your selection now: 8
Total stock traded: 4 Amazon, 1 Tesla, and 1 Microsoft

Make your selection now: 3
Mudkip is leaving with 2 Amazon, 1 Tesla, and 1 Microsoft stock.

Make your selection now: 3
Tepig's requests for 4 Amazon, 2 Tesla, and 1 Microsoft stock is now pending. Goodbye, Tepig. We will let you
know when your request is processed!

Make your selection now: 3
Abra's requests for 5 Amazon, 3 Tesla, and 2 Microsoft stock is now pending. Goodbye, Abra. We will let you
know when your request is processed!

Make your selection now: 3
Mew is leaving with 2 Amazon, 1 Tesla, and 1 Microsoft stock.

Make your selection now: 4
The following customers are waiting to be served: 
Pikachu requesting 2 Amazon, 2 Tesla, and 1 Microsoft stock

Make your selection now: 5
The following requests are pending: 
Pikachu requesting 2 Amazon, 2 Tesla, and 1 Microsoft stock

Make your selection now: 7
4 customers have been served.

Make your selection now: 8
Total stock traded: 8 Amazon, 3 Tesla, and 3 Microsoft

Make your selection now: 6
No request could be processed!

Make your selection now: 4
The following customers are waiting to be served: 
Pikachu requesting 2 Amazon, 2 Tesla, and 1 Microsoft stock

Make your selection now: 5
The following requests are pending: 
Pikachu requesting 2 Amazon, 2 Tesla, and 1 Microsoft stock

Make your selection now: 7
4 customers have been served.

Make your selection now: 8
Total stock traded: 8 Amazon, 3 Tesla, and 3 Microsoft

Make your selection now: 2
Welcome, your name, please: 
How much Amazon stock are you selling: 
How much Tesla stock are you selling: 
How much Microsoft stock are you selling: 
Thanks, Meloetta, here is your receipt for the 10 Amazon, 10 Tesla, and 10 Microsoft stock!

Make your selection now: 6
Abra's request for 5 Amazon, 3 Tesla, and 2 Microsoft stock has been fulfilled and the customer has been notified.
Tepig's request for 4 Amazon, 2 Tesla, and 1 Microsoft stock has been fulfilled and the customer has been notified.
::::::::::::::
rationale.txt
::::::::::::::
My rationale for using the two SLS based databases for this midterm was simple;
they were effective, simple, and provided the utility I needed for this
assignment.

A Queue was exactly the type of database I needed for processing the first-come,
first-serve type of input. Enqueue and Dequeue were the perfect tools for the
job, and the SLS based Queue kept size down by only allocating memory as it was
needed.

As for the Stack, its similar; the Stack's push and pop were the tools I needed
in order to handle the FILO style of handling in the pending stack, and again
kept the size down by only allocating memory as required.

The methods were also incredibly easy to implement for the assignment, and
provided adequate utility.
